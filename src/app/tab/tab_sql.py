
import re
import tkinter as tk
from threading import Thread
from tkinter import ttk, Text, messagebox, filedialog, Frame
from tkinter.ttk import Label, Button, Entry, Scrollbar
from pandastable import Table, TableModel
import pandas as pd

from src.gpt.text2sql import Text2SQLAgent
from src.app.widgets.loader import Loader

class TabSQL:
    def __init__(self, notebook):
        self.agent = Text2SQLAgent()

        self.frame = Frame(notebook)
        self.main = None
        self.loader = Loader(self.frame)
        self.run_query_callback = None
        self.send_to_plot_callback = None
        self.build_ui()

        self.frame.rowconfigure(0, weight=0)
        self.frame.rowconfigure(1, weight=1)
        self.frame.rowconfigure(2, weight=0)
        self.frame.columnconfigure(0, weight=1)
        
    def set_main(self, main_window):
        self.main = main_window
        
    def build_ui(self):
        
        # --- Khung nh·∫≠p SQL ---
        editor_frame = Frame(self.frame)
        editor_frame.pack(fill="x", padx=5, pady=5)

        Label(editor_frame, text="C√¢u l·ªánh SQL:").pack(anchor="w")

        # Frame con cho SQL + scroll
        sql_box_frame = Frame(editor_frame)
        sql_box_frame.pack(fill="x")

        self.sql_text = Text(sql_box_frame, height=8, wrap="none")
        self.sql_text.pack(side="left", fill="x", expand=True)

        # Thanh cu·ªôn cho √¥ SQL
        sql_scroll = Scrollbar(sql_box_frame, command=self.sql_text.yview)
        sql_scroll.pack(side="right", fill="y")
        self.sql_text.config(yscrollcommand=sql_scroll.set)


        # --- Khung tr·ª£ l√Ω + nh·∫≠p ng√¥n ng·ªØ t·ª± nhi√™n ---
        assist_frame = Frame(self.frame)
        assist_frame.pack(fill="x", padx=5, pady=5)

        Label(assist_frame, text="M√¥ t·∫£ b·∫±ng ng√¥n ng·ªØ:").pack(anchor="w")

        # Frame con cho NL input + scroll + button
        nl_box_frame = Frame(assist_frame)
        nl_box_frame.pack(fill="x")

        # √î nh·∫≠p ng√¥n ng·ªØ t·ª± nhi√™n
        self.nl_input = tk.Text(nl_box_frame, height=3, wrap="word")
        self.nl_input.pack(side="left", fill="x", expand=True)

        # Thanh cu·ªôn ri√™ng cho √¥ NL
        nl_scroll = Scrollbar(nl_box_frame, command=self.nl_input.yview)
        nl_scroll.pack(side="right", fill="y")
        self.nl_input.config(yscrollcommand=nl_scroll.set)

        # N√∫t GPT tr·ª£ l√Ω (n·∫±m b√™n ph·∫£i NL input)
        assist_btn = Button(
            assist_frame, text="ü§ñ", width=4, command=self.llm_assist
        )
        assist_btn.pack(anchor="e", pady=2)
        
        # ---------- K·∫øt qu·∫£ truy v·∫•n + Nh·∫≠t k√Ω th·ª±c thi ----------
        container_frame = Frame(self.frame)
        container_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # --- K·∫øt qu·∫£ truy v·∫•n ---
        result_frame = Frame(container_frame)
        result_frame.pack(side="left", fill="both", expand=True, padx=(0, 5))

        Label(result_frame, text="K·∫øt qu·∫£ truy v·∫•n:").pack(anchor="w")

        self.table_frame = Frame(result_frame)
        self.table_frame.pack(fill="both", expand=True)

        # T·∫°o b·∫£ng tr·ªëng ban ƒë·∫ßu
        self.ptable = Table(self.table_frame, dataframe=pd.DataFrame())
        self.ptable.show()

        # --- Nh·∫≠t k√Ω th·ª±c thi ---
        log_frame = Frame(container_frame, width=70)  # ƒë·∫∑t width cho c√¢n ƒë·ªëi
        log_frame.pack(side="right", fill="both")

        Label(log_frame, text="Nh·∫≠t k√Ω th·ª±c thi:").pack(anchor="w")

        self.log_text = Text(log_frame, height=8, width=70, wrap="word", state="disabled")
        self.log_text.pack(fill="both", expand=True)

        # ---------- C√°c n√∫t thao t√°c ----------
        button_frame = Frame(self.frame)
        button_frame.pack(fill="x", pady=5)

        Button(button_frame, text="Ch·∫°y", command=self.run_query).pack(side="left", padx=5)
        Button(button_frame, text="X√≥a", command=self.clear_query).pack(side="left", padx=5)
        Button(button_frame, text="L∆∞u k·∫øt qu·∫£", command=self.save_result).pack(side="left", padx=5)
        Button(button_frame, text="G·ª≠i sang bi·ªÉu ƒë·ªì", command=self.send_to_plot).pack(side="left", padx=5)

    # --------- C√°c ph∆∞∆°ng th·ª©c x·ª≠ l√Ω ---------
    def run_query(self):
        # Th·ª±c thi c√¢u l·ªánh SQL
        query = self.sql_text.get("1.0", "end").strip()
        if not query:
            return self.log("‚ö†Ô∏è Ch∆∞a nh·∫≠p c√¢u l·ªánh SQL.")

        def task():
            try:
                self.main.ketnoi.cursor().execute(f"EXPLAIN {query}")
                self._log_threadsafe(f"ƒêang ch·∫°y c√¢u l·ªánh:\n{query}")
                if self.run_query_callback:
                    df = self.run_query_callback(query)
                    if isinstance(df, pd.DataFrame):
                        self._update_result_table_threadsafe(df)
                        self._log_threadsafe(f"‚úÖ Tr·∫£ v·ªÅ {len(df)} d√≤ng.")
                    else:
                        self._log_threadsafe("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ.")
            except Exception as e:
                self._log_threadsafe(f"C√¢u l·ªánh SQL kh√¥ng h·ª£p l·ªá: {str(e)}")
            finally:
                self.frame.after(0, self.loader.hide)

        self.loader.show(is_pack=True)
        Thread(target=task, daemon=True).start()


    def clear_query(self):
        # X√≥a c√¢u l·ªánh SQL hi·ªán t·∫°i
        self.sql_text.delete("1.0", "end")

    def save_result(self):
        # L∆∞u k·∫øt qu·∫£ v√†o 1 file csv
        file_path = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV Files", "*.csv")],
            title="L∆∞u k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng CSV"
        )
        if not file_path:
            return
        try:
            df = self.ptable.model.df
            df.to_csv(file_path, index=False)
            self.log(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o {file_path}")
        except Exception as e:
            messagebox.showerror("L·ªói", str(e))

    def send_to_plot(self):
        # G·ª≠i k·∫øt qu·∫£ v√†o bi·∫øn query_data c·ªßa m√†n h√¨nh ch√≠nh
        if self.send_to_plot_callback:
            df = self.ptable.model.df
            self.send_to_plot_callback(df)
            self.log("üìä ƒê√£ g·ª≠i d·ªØ li·ªáu sang tab Bi·ªÉu ƒë·ªì.")

    def update_result_table(self, df: pd.DataFrame):
        # C·∫≠p nh·∫≠t DataFrame trong pandastable
        self.ptable.updateModel(TableModel(df))
        self.ptable.redraw()

    def log(self, message: str):
        # In ra th√¥ng tin v√†o √¥ nh·∫≠t k√Ω th·ª±c thi
        self.log_text.config(state="normal")
        self.log_text.insert("end", message + "\n")
        self.log_text.see("end")
        self.log_text.config(state="disabled")

    def llm_assist(self):
        # S·ª≠ d·ª•ng AI ƒë·ªÉ sinh ra c√¢u l·ªánh SQL
        query = self.nl_input.get("1.0", "end-1c").strip()
        db_path = self.main.tab_chon_file_db.chon_file_DB_entry.get().strip()
        self.log(f"[ü§ñ Tr·ª£ l√Ω] (placeholder) S·∫Ω g·ª≠i ƒë·∫øn LLM:\n{query if query else '(tr·ªëng)'}")

        def task():
            try:
                messages, sql_query = self.agent.run(query=query, db_path=db_path)
                self.frame.after(0, lambda: self._set_sql_text(sql_query))

                for message in messages:
                    message_content = re.sub(r"=+", "=====", message.pretty_repr())
                    self._log_threadsafe(message_content)
            except Exception as e:
                self._log_threadsafe(f"L·ªói khi g·ªçi LLM: {str(e)}")
            finally:
                self.frame.after(0, self.loader.hide)

        self.loader.show(is_pack=True)
        Thread(target=task, daemon=True).start()

    def _log_threadsafe(self, message: str):
        self.frame.after(0, lambda: self.log(message))

    def _update_result_table_threadsafe(self, df: pd.DataFrame):
        self.frame.after(0, lambda: self.update_result_table(df))

    def _set_sql_text(self, sql_query: str):
        self.sql_text.delete("1.0", "end")
        if sql_query:
            self.sql_text.insert("1.0", sql_query)
